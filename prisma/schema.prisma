// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  groupMembers GroupMember[]
  createdGroups Group[] @relation("GroupCreator")
  messages     Message[]

  @@map("users")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User          @relation("GroupCreator", fields: [createdBy], references: [id])
  members     GroupMember[]
  messages    Message[]
  llms        GroupLLM[]

  @@map("groups")
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  joinedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupLLM {
  id      String @id @default(cuid())
  groupId String
  name    String  // Display name like "Assistant 1"
  model   String  // Groq model name like "mixtral-8x7b-32768"
  createdAt DateTime @default(now())

  // Relations
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([groupId, name])
  @@map("group_llms")
}

enum MessageType {
  USER
  LLM
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType
  senderId  String?     // User ID if type is USER
  llmId     String?     // LLM ID if type is LLM
  groupId   String
  createdAt DateTime    @default(now())

  // Relations
  sender User?     @relation(fields: [senderId], references: [id])
  llm    GroupLLM? @relation(fields: [llmId], references: [id])
  group  Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("messages")
}